// 灯泡开关
// 初始时有 n 个灯泡关闭。 第 1 轮，你打开所有的灯泡。 第 2 轮，每两个灯泡你关闭一次。 第 3 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关闭）。第 i 轮，每 i 个灯泡切换一次开关。 对于第 n 轮，你只切换最后一个灯泡的开关。 找出 n 轮后有多少个亮着的灯泡。
// 题目要求可以理解为：每次将i的倍数的灯开关切换。我们可以发现，任何一个数总能拆解成两个数的乘积（假设编号为8的灯，会在第1、8次和2、4次被开关），
// 从而导致开关状态不变。那么只有平方数的开关状态会被改变（自己和自己的乘积）。统计n以下的完全平方数个数即可。

#include <math.h>

class Solution {
public:
    int bulbSwitch(int n) {
        return sqrt(n);
    }
};